C51 COMPILER V9.01   MAIN                                                                  10/23/2018 17:54:49 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: E:\keil_class\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          /*---------------------------------------------------------------------*/
   3          /* --- STC MCU International Limited ----------------------------------*/
   4          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   5          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   6          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   7          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   8          /* --- Web: www.GXWMCU.com --------------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了宏晶科技的资料及程序   */
  11          /*---------------------------------------------------------------------*/
  12          
  13          
  14          /*************  本程序功能说明  **************
  15          
  16          读ADC和测温度.
  17          
  18          用STC的MCU的IO方式控制74HC595驱动8位数码管。
  19          
  20          用户可以修改宏来选择时钟频率.
  21          
  22          使用Timer0的16位自动重装来产生1ms节拍,程序运行于这个节拍下, 用户修改MCU主时钟频率时,自动定时于1ms.
  23          
  24          左边4位数码管显示ADC2接的电压基准TL431的读数, 右边4位数码管显示温度值, 分辨率0.1度.
  25          
  26          NTC使用1%精度的MF52 10K@25度C.
  27          
  28          测温度时, 为了通用, 使用12位的ADC值, 使用对分查找表格来计算, 小数点后一位数是用线性插补来计算的.
  29          
  30          所以, 测温度的ADC3进行4次ADC连续采样, 变成12位的ADC来计算温度.
  31          
  32          ******************************************/
  33          
  34          #define         MAIN_Fosc               22118400L       //定义主时钟
  35          
  36          #include        "STC15Fxxxx.H"
  37          
  38          /****************************** 用户定义宏 ***********************************/
  39          
  40          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))           //Timer 0 中断频率, 1000次/秒
  41          
  42          /*****************************************************************************/
  43          
  44          
  45          #define DIS_DOT         0x20
  46          #define DIS_BLACK       0x10
  47          #define DIS_            0x11
  48          
  49          
  50          
  51          
  52          
  53          /*************  本地常量声明    **************/
  54          u8 code t_display[]={                                           //标准字库
  55          //       0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 17:54:49 PAGE 2   

  56                  0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  57          //black  -     H    J    K        L        N    o   P    U     t    G    Q    r   M    y
  58                  0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  59                  0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};        //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  60          
  61          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};              //位码
  62          
  63          
  64          /*************  IO口定义        **************/
  65          sbit    P_HC595_SER   = P4^0;   //pin 14        SER             data input
  66          sbit    P_HC595_RCLK  = P5^4;   //pin 12        RCLk    store (latch) clock
  67          sbit    P_HC595_SRCLK = P4^3;   //pin 11        SRCLK   Shift data clock
  68          
  69          
  70          /*************  本地变量声明    **************/
  71          
  72          u8      LED8[8];                //显示缓冲
  73          u8      display_index;  //显示位索引
  74          bit     B_1ms;                  //1ms标志
  75          
  76          u16     msecond;
  77          
  78          /*************  本地函数声明    **************/
  79          u16     get_temperature(u16 adc);
  80          u16     Get_ADC10bitResult(u8 channel); //channel = 0~7
  81          
  82          
  83          
  84          /**********************************************/
  85          void main(void)
  86          {
  87   1              u8      i;
  88   1              u16     j;
  89   1              
  90   1              P0M1 = 0;       P0M0 = 0;       //设置为准双向口
  91   1              P1M1 = 0;       P1M0 = 0;       //设置为准双向口
  92   1              P2M1 = 0;       P2M0 = 0;       //设置为准双向口
  93   1              P3M1 = 0;       P3M0 = 0;       //设置为准双向口
  94   1              P4M1 = 0;       P4M0 = 0;       //设置为准双向口
  95   1              P5M1 = 0;       P5M0 = 0;       //设置为准双向口
  96   1              P6M1 = 0;       P6M0 = 0;       //设置为准双向口
  97   1              P7M1 = 0;       P7M0 = 0;       //设置为准双向口
  98   1      
  99   1              display_index = 0;
 100   1              P1ASF = 0x0C;           //P1.2 P1.3做ADC
 101   1              ADC_CONTR = 0xE0;       //90T, ADC power on
 102   1              
 103   1              AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 104   1              TH0 = (u8)(Timer0_Reload / 256);
 105   1              TL0 = (u8)(Timer0_Reload % 256);
 106   1              ET0 = 1;        //Timer0 interrupt enable
 107   1              TR0 = 1;        //Tiner0 run
 108   1              EA = 1;         //打开总中断
 109   1              
 110   1              for(i=0; i<8; i++)      LED8[i] = 0x10; //上电消隐
 111   1      
 112   1              
 113   1              while(1)
 114   1              {
 115   2                      if(B_1ms)       //1ms到
 116   2                      {
 117   3                              B_1ms = 0;
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 17:54:49 PAGE 3   

 118   3                              if(++msecond >= 300)    //300ms到
 119   3                              {
 120   4                                      msecond = 0;
 121   4                                      j = Get_ADC10bitResult(2);      //参数0~7,查询方式做一次ADC, 返回值就是结果, == 1024 为错误
 122   4                                      
 123   4                                      if(j < 1024)
 124   4                                      {
 125   5                                              LED8[4] = 0;            //显示ADC值
 126   5                                              LED8[5] = 2;
 127   5                                              LED8[6] = 7;
 128   5                                              LED8[7] = 7;
 129   5                                              if(LED8[0] == 0)        LED8[0] = DIS_BLACK;
 130   5                                      }
 131   4                                      else    //错误
 132   4                                      {
 133   5                                              for(i=0; i<4; i++)      LED8[i] = DIS_;
 134   5                                      }
 135   4                                      
 136   4      
 137   4                                      j = Get_ADC10bitResult(3);      //参数0~7,查询方式做一次ADC, 返回值就是结果, == 1024 为错误
 138   4                                      j += Get_ADC10bitResult(3);
 139   4                                      j += Get_ADC10bitResult(3);
 140   4                                      j += Get_ADC10bitResult(3);
 141   4      
 142   4                                      if(j < 1024*4)
 143   4                                      {
 144   5                                      /*
 145   5                                              LED8[0] = j / 1000;             //显示ADC值
 146   5                                              LED8[1] = (j % 1000) / 100;
 147   5                                              LED8[2] = (j % 100) / 10;
 148   5                                              LED8[3] = j % 10;
 149   5                                              if(LED8[0] == 0)        LED8[0] = DIS_BLACK;
 150   5                                      */
 151   5                                              j =     get_temperature(j);     //计算温度值
 152   5      
 153   5                                              if(j >= 400)    F0 = 0, j -= 400;               //温度 >= 0度
 154   5                                              else                    F0 = 1, j  = 400 - j;   //温度 <  0度
 155   5                                              LED8[0] = 1;            //显示温度值
 156   5                                              LED8[1] = 6;
 157   5                                              LED8[2] = 3;
 158   5                                              LED8[3] = 4;
 159   5                                      //      if(LED8[4] == 0)        LED8[4] = DIS_BLACK;
 160   5                                              if(F0)  LED8[4] = DIS_;         //显示-
 161   5                                      }
 162   4                                      else    //错误
 163   4                                      {
 164   5                                              for(i=0; i<8; i++)      LED8[i] = DIS_;
 165   5                                      }
 166   4                              }
 167   3      
 168   3                      }
 169   2              }
 170   1      } 
 171          /**********************************************/
 172          
 173          //========================================================================
 174          // 函数: u16    Get_ADC10bitResult(u8 channel)
 175          // 描述: 查询法读一次ADC结果.
 176          // 参数: channel: 选择要转换的ADC.
 177          // 返回: 10位ADC结果.
 178          // 版本: V1.0, 2012-10-22
 179          //========================================================================
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 17:54:49 PAGE 4   

 180          u16     Get_ADC10bitResult(u8 channel)  //channel = 0~7
 181          {
 182   1              ADC_RES = 0;
 183   1              ADC_RESL = 0;
 184   1      
 185   1              ADC_CONTR = (ADC_CONTR & 0xe0) | 0x08 | channel;        //start the ADC
 186   1              NOP(4);
 187   1      
 188   1              while((ADC_CONTR & 0x10) == 0)  ;       //wait for ADC finish
 189   1              ADC_CONTR &= ~0x10;             //清除ADC结束标志
 190   1              return  (((u16)ADC_RES << 2) | (ADC_RESL & 3));
 191   1      }
 192          
 193          
 194          //      MF52E 10K at 25, B = 3950, ADC = 12 bits
 195          u16 code temp_table[]={
 196                          140,    //;-40  0
 197                          149,    //;-39  1
 198                          159,    //;-38  2
 199                          168,    //;-37  3
 200                          178,    //;-36  4
 201                          188,    //;-35  5
 202                          199,    //;-34  6
 203                          210,    //;-33  7
 204                          222,    //;-32  8
 205                          233,    //;-31  9
 206                          246,    //;-30  10
 207                          259,    //;-29  11
 208                          272,    //;-28  12
 209                          286,    //;-27  13
 210                          301,    //;-26  14
 211                          317,    //;-25  15
 212                          333,    //;-24  16
 213                          349,    //;-23  17
 214                          367,    //;-22  18
 215                          385,    //;-21  19
 216                          403,    //;-20  20
 217                          423,    //;-19  21
 218                          443,    //;-18  22
 219                          464,    //;-17  23
 220                          486,    //;-16  24
 221                          509,    //;-15  25
 222                          533,    //;-14  26
 223                          558,    //;-13  27
 224                          583,    //;-12  28
 225                          610,    //;-11  29
 226                          638,    //;-10  30
 227                          667,    //;-9   31
 228                          696,    //;-8   32
 229                          727,    //;-7   33
 230                          758,    //;-6   34
 231                          791,    //;-5   35
 232                          824,    //;-4   36
 233                          858,    //;-3   37
 234                          893,    //;-2   38
 235                          929,    //;-1   39
 236                          965,    //;0    40
 237                          1003,   //;1    41
 238                          1041,   //;2    42
 239                          1080,   //;3    43
 240                          1119,   //;4    44
 241                          1160,   //;5    45
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 17:54:49 PAGE 5   

 242                          1201,   //;6    46
 243                          1243,   //;7    47
 244                          1285,   //;8    48
 245                          1328,   //;9    49
 246                          1371,   //;10   50
 247                          1414,   //;11   51
 248                          1459,   //;12   52
 249                          1503,   //;13   53
 250                          1548,   //;14   54
 251                          1593,   //;15   55
 252                          1638,   //;16   56
 253                          1684,   //;17   57
 254                          1730,   //;18   58
 255                          1775,   //;19   59
 256                          1821,   //;20   60
 257                          1867,   //;21   61
 258                          1912,   //;22   62
 259                          1958,   //;23   63
 260                          2003,   //;24   64
 261                          2048,   //;25   65
 262                          2093,   //;26   66
 263                          2137,   //;27   67
 264                          2182,   //;28   68
 265                          2225,   //;29   69
 266                          2269,   //;30   70
 267                          2312,   //;31   71
 268                          2354,   //;32   72
 269                          2397,   //;33   73
 270                          2438,   //;34   74
 271                          2479,   //;35   75
 272                          2519,   //;36   76
 273                          2559,   //;37   77
 274                          2598,   //;38   78
 275                          2637,   //;39   79
 276                          2675,   //;40   80
 277                          2712,   //;41   81
 278                          2748,   //;42   82
 279                          2784,   //;43   83
 280                          2819,   //;44   84
 281                          2853,   //;45   85
 282                          2887,   //;46   86
 283                          2920,   //;47   87
 284                          2952,   //;48   88
 285                          2984,   //;49   89
 286                          3014,   //;50   90
 287                          3044,   //;51   91
 288                          3073,   //;52   92
 289                          3102,   //;53   93
 290                          3130,   //;54   94
 291                          3157,   //;55   95
 292                          3183,   //;56   96
 293                          3209,   //;57   97
 294                          3234,   //;58   98
 295                          3259,   //;59   99
 296                          3283,   //;60   100
 297                          3306,   //;61   101
 298                          3328,   //;62   102
 299                          3351,   //;63   103
 300                          3372,   //;64   104
 301                          3393,   //;65   105
 302                          3413,   //;66   106
 303                          3432,   //;67   107
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 17:54:49 PAGE 6   

 304                          3452,   //;68   108
 305                          3470,   //;69   109
 306                          3488,   //;70   110
 307                          3506,   //;71   111
 308                          3523,   //;72   112
 309                          3539,   //;73   113
 310                          3555,   //;74   114
 311                          3571,   //;75   115
 312                          3586,   //;76   116
 313                          3601,   //;77   117
 314                          3615,   //;78   118
 315                          3628,   //;79   119
 316                          3642,   //;80   120
 317                          3655,   //;81   121
 318                          3667,   //;82   122
 319                          3679,   //;83   123
 320                          3691,   //;84   124
 321                          3702,   //;85   125
 322                          3714,   //;86   126
 323                          3724,   //;87   127
 324                          3735,   //;88   128
 325                          3745,   //;89   129
 326                          3754,   //;90   130
 327                          3764,   //;91   131
 328                          3773,   //;92   132
 329                          3782,   //;93   133
 330                          3791,   //;94   134
 331                          3799,   //;95   135
 332                          3807,   //;96   136
 333                          3815,   //;97   137
 334                          3822,   //;98   138
 335                          3830,   //;99   139
 336                          3837,   //;100  140
 337                          3844,   //;101  141
 338                          3850,   //;102  142
 339                          3857,   //;103  143
 340                          3863,   //;104  144
 341                          3869,   //;105  145
 342                          3875,   //;106  146
 343                          3881,   //;107  147
 344                          3887,   //;108  148
 345                          3892,   //;109  149
 346                          3897,   //;110  150
 347                          3902,   //;111  151
 348                          3907,   //;112  152
 349                          3912,   //;113  153
 350                          3917,   //;114  154
 351                          3921,   //;115  155
 352                          3926,   //;116  156
 353                          3930,   //;117  157
 354                          3934,   //;118  158
 355                          3938,   //;119  159
 356                          3942    //;120  160
 357          };
 358          
 359          /********************  计算温度 ***********************************************/
 360          // 计算结果: 0对应-40.0度, 400对应0度, 625对应25.0度, 最大1600对应120.0度. 
 361          // 为了通用, ADC输入为12bit的ADC值.
 362          // 电路和软件算法设计: Coody
 363          /**********************************************/
 364          
 365          #define         D_SCALE         10              //结果放大倍数, 放大10倍就是保留一位小数
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 17:54:49 PAGE 7   

 366          u16     get_temperature(u16 adc)
 367          {
 368   1              u16     code *p;
 369   1              u16     i;
 370   1              u8      j,k,min,max;
 371   1              
 372   1              adc = 4096 - adc;       //Rt接地
 373   1              p = temp_table;
 374   1              if(adc < p[0])          return (0xfffe);
 375   1              if(adc > p[160])        return (0xffff);
 376   1              
 377   1              min = 0;                //-40度
 378   1              max = 160;              //120度
 379   1      
 380   1              for(j=0; j<5; j++)      //对分查表
 381   1              {
 382   2                      k = min / 2 + max / 2;
 383   2                      if(adc <= p[k]) max = k;
 384   2                      else                    min = k;
 385   2              }
 386   1                       if(adc == p[min])      i = min * D_SCALE;
 387   1              else if(adc == p[max])  i = max * D_SCALE;
 388   1              else    // min < temp < max
 389   1              {
 390   2                      while(min <= max)
 391   2                      {
 392   3                              min++;
 393   3                              if(adc == p[min])       {i = min * D_SCALE;     break;}
 394   3                              else if(adc < p[min])
 395   3                              {
 396   4                                      min--;
 397   4                                      i = p[min];     //min
 398   4                                      j = (adc - i) * D_SCALE / (p[min+1] - i);
 399   4                                      i = min;
 400   4                                      i *= D_SCALE;
 401   4                                      i += j;
 402   4                                      break;
 403   4                              }
 404   3                      }
 405   2              }
 406   1              return i;
 407   1      }
 408          
 409          
 410          /**************** 向HC595发送一个字节函数 ******************/
 411          void Send_595(u8 dat)
 412          {               
 413   1              u8      i;
 414   1              for(i=0; i<8; i++)
 415   1              {
 416   2                      dat <<= 1;
 417   2                      P_HC595_SER   = CY;
 418   2                      P_HC595_SRCLK = 1;
 419   2                      P_HC595_SRCLK = 0;
 420   2              }
 421   1      }
 422          
 423          /********************** 显示扫描函数 ************************/
 424          void DisplayScan(void)
 425          {       
 426   1              Send_595(~T_COM[display_index]);                                //输出位码
 427   1              Send_595(t_display[LED8[display_index]]);       //输出段码
C51 COMPILER V9.01   MAIN                                                                  10/23/2018 17:54:49 PAGE 8   

 428   1      
 429   1              P_HC595_RCLK = 1;
 430   1              P_HC595_RCLK = 0;                                                       //锁存输出数据
 431   1              if(++display_index >= 8)        display_index = 0;      //8位结束回0
 432   1      }
 433          
 434          
 435          /********************** Timer0 1ms中断函数 ************************/
 436          void timer0 (void) interrupt TIMER0_VECTOR
 437          {
 438   1              DisplayScan();  //1ms扫描显示一位
 439   1              B_1ms = 1;              //1ms标志
 440   1      }
 441          
 442          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    823    ----
   CONSTANT SIZE    =    373    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
